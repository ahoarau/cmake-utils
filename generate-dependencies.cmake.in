message("Including ${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-component-@component@-link-libraries.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-component-@component@-link-libraries.cmake")
if(NOT imported_libraries)
    message(FATAL_ERROR "imported_libraries variable is not set.")
endif()
if(NOT buildsystem_targets)
    message(FATAL_ERROR "buildsystem_targets variable is not set.")
endif()

message("imported_libraries: ${imported_libraries}")
message("buildsystem_targets: ${buildsystem_targets}")

message("Reading package dependencies JSON ${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-package-dependencies.json")
file(READ ${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-package-dependencies.json package_dependencies_json)
string(JSON package_dependencies GET "${package_dependencies_json}" "package_dependencies")
string(JSON num_deps LENGTH "${package_dependencies}")
math(EXPR max_idx "${num_deps} - 1")

set(used_indexes "")
set(fd "include(CMakeFindDependencyMacro)\n\n")
foreach(imported_lib IN LISTS imported_libraries)
    if(NOT imported_lib)
        continue()
    endif()

    message("Processing imported library: ${imported_lib}")

    if(${imported_lib} IN_LIST buildsystem_targets)
        message("Skipping imported library '${imported_lib}' as it is part of the buildsystem targets.")
        continue()
    endif()

    # Find the corresponding package dependency JSON info
    set(package_idx -1)
    set(package_json "")
    foreach(idx RANGE ${max_idx})
        string(JSON dep_i_json GET "${package_dependencies}" ${idx})
        string(JSON package_targets GET "${dep_i_json}" "package_targets")
        if(${imported_lib} IN_LIST package_targets)
            set(package_json ${dep_i_json})
            set(package_idx ${idx})
            break()
        endif()
    endforeach()

    if(NOT package_json)
        message(WARNING "Could not find package dependency information for imported target: ${imported_lib}")
        continue()
    endif()

    # Parse the package JSON info
    string(JSON package_name GET "${package_json}" "package_name")
    string(JSON find_package_args GET "${package_json}" "find_package_args")
    string(JSON package_targets GET "${package_json}" "find_package_args")
    string(JSON using_custom_module GET "${package_json}" "using_custom_module")

    if(package_idx IN_LIST used_indexes)
        # Sorta works, but need to gather the imported targets to make it fully work.
        # Example: if(NOT TARGET importedlibA OR NOT TARGET importedlibB)
        # message("Skipping already processed package ${package_name} (find_package(${find_package_args})).")
        # continue()
    endif()
    list(APPEND used_indexes ${package_idx})

    # Handling if package is using a custom module
    if(${using_custom_module})
        string(APPEND fd "list(APPEND CMAKE_MODULE_PATH \${CMAKE_CURRENT_LIST_DIR}/modules/${package_name})\n\n")
    endif()

    string(REPLACE ";" " " find_package_args "${find_package_args}")

    # Handling find_dependency logic
    if(NOT package_targets)
        string(APPEND fd "find_dependency(${find_package_args})\n")
    else()
        string(APPEND fd "if(NOT TARGET ${imported_lib})\n")
        string(APPEND fd "    message(\"            ==> Executing find_dependency(${find_package_args})\")\n")
        string(APPEND fd "    find_dependency(${find_package_args})\n")
        string(APPEND fd "endif()\n\n")
    endif()
endforeach()

message("Generating ${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-component-@component@-dependencies.cmake")
file(WRITE ${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-component-@component@-dependencies.cmake "${fd}")
